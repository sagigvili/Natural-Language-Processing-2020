Python es un lenguaje de programación interpretado cuya filosofía hace hincapié en la legibilidad de su código .
[ 2 ] Se trata de un lenguaje de programación multiparadigma , ya que soporta orientación a objetos , programación imperativa y , en menor medida , programación funcional .
Es un lenguaje interpretado , dinámico y multiplataforma .
Es administrado por la Python Software Foundation .
Posee una licencia de código abierto , denominada Python Software Foundation License , [ 3 ] == Historia ==
Python fue creado a finales de los ochenta [ 4 ] por Guido van Rossum en el Centro para las Matemáticas y la Informática ( CWI , Centrum Wiskunde Informatica ) , en los Países Bajos , como un sucesor del lenguaje de programación ABC , capaz de manejar excepciones e interactuar con el sistema operativo Amoeba .
[ 5 ] El nombre del lenguaje proviene de la afición de su creador por los humoristas británicos Monty Python .
[ 6 ] Van Rossum es el principal autor de Python , y su continuo rol central en decidir la dirección de Python es reconocido , refiriéndose a él como Benevolente Dictador Vitalicio ( en inglés : Benevolent Dictator for Life , BDFL ) ; sin embargo el 12 de julio de 2018 declinó de dicha situación de honor sin dejar un sucesor o sucesora y con una declaración altisonante : [ 7 ] En 1991 , van Rossum publicó el código de la versión en .
[ 9 ] En esta etapa del desarrollo ya estaban presentes clases con herencia , manejo de excepciones , funciones y los tipos modulares , como : str , list , dict , entre otros .
Además en este lanzamiento inicial aparecía un sistema de módulos adoptado de ; van Rossum describe el módulo como una de las mayores unidades de programación de Python .
[ 4 ] El modelo de excepciones en Python es parecido al de , con la adición de una cláusula else .
[ 5 ] En el año 1994 se formó , el foro de discusión principal de Python , marcando un hito en el crecimiento del grupo de usuarios de este lenguaje .
Python alcanzó la versión en enero de 1994 .
Una característica de este lanzamiento fueron las herramientas de la programación funcional : lambda , reduce , filter y map .
Van Rossum explicó que hace 12 años , Python adquirió lambda , reduce , filter y map , cortesía de Amrit Perm , un hacker informático de Lisp que las implementó porque las extrañaba .
[ 10 ] La última versión liberada proveniente de CWI fue Python .
En 1995 , van Rossum continuó su trabajo en Python en la Corporation for National Research Initiatives ( CNRI ) en Reston , Virginia , donde lanzó varias versiones del software .
Durante su estancia en CNRI , van Rossum lanzó la iniciativa Computer Programming for Everybody ( CP4E ) , con el fin de hacer la programación más accesible a más gente , con un nivel de básico en lenguajes de programación , similar a la alfabetización básica en inglés y habilidades matemáticas necesarias por muchos trabajadores .
Python tuvo un papel crucial en este proceso : debido a su orientación hacia una sintaxis limpia , ya era idóneo , y las metas de CP4E presentaban similitudes con su predecesor , ABC .
El proyecto fue patrocinado por DARPA .
[ 11 ] En el año 2007 , el proyecto CP4E está inactivo , y mientras Python intenta ser fácil de aprender y no muy arcano en su sintaxis y semántica , alcanzando a los , no es una preocupación activa .
[ 12 ] En el año 2000 , el equipo principal de desarrolladores de Python se cambió a para formar el equipo BeOpen PythonLabs .
CNRI pidió que la versión fuera pública , continuando su desarrollo hasta que el equipo de desarrollo abandonó CNRI ; su programa de lanzamiento y el de la versión tenían una significativa cantidad de traslapo .
[ 13 ] Python fue el primer y único lanzamiento de .
Después que Python fuera publicado por , Guido van Rossum y los otros desarrolladores de PythonLabs se unieron en Digital Creations .
Python tomó una característica mayor del lenguaje de programación funcional Haskell : listas por comprensión .
La sintaxis de Python para esta construcción es muy similar a la de Haskell , salvo por la preferencia de los caracteres de puntuación en Haskell , y la preferencia de Python por palabras claves alfabéticas .
Python introdujo además un sistema de recolección de basura capaz de recolectar referencias cíclicas .
[ 13 ] Posterior a este doble lanzamiento , y después que van Rossum dejara CNRI para trabajar con desarrolladores de software comercial , quedó claro que la opción de usar Python con software disponible bajo GNU GPL era muy deseable .
La licencia usada entonces , la Python License , incluía una cláusula estipulando que la licencia estaba gobernada por el estado de Virginia , por lo que , bajo la óptica de los abogados de Free Software Foundation ( FSF ) , se hacía incompatible con GPL .
Para las versiones y , CNRI y FSF hicieron compatibles la licencia de Python con GPL , renombrandola Python Software Foundation License .
En el año 2001 , van Rossum fue premiado con FSF Award for the Advancement of Free Software .
Python fue un trabajo derivado de las versiones y .
Es a partir de este momento que Python Software Foundation ( PSF ) pasa a ser dueño del proyecto , organizada como una organización sin ánimo de lucro fundada en el año 2001 , tomando como modelo la Apache Software Foundation .
[ 3 ] Incluido en este lanzamiento fue una implementación del scoping más parecida a las reglas de static scoping ( del cual Scheme es el originador ) .
[ 14 ] Una innovación mayor en Python fue la unificación de los tipos en Python ( tipos escritos en C ) , y clases ( tipos escritos en Python ) dentro de una jerarquía .
Esa unificación logró un modelo de objetos de Python puro y consistente .
[ 15 ] También fueron agregados los generadores que fueron inspirados por el lenguaje Icon .
[ 16 ] Las adiciones a la biblioteca estándar de Python y las decisiones sintácticas fueron influenciadas fuertemente por Java en algunos casos : el package logging , [ 17 ] introducido en la versión , está basado en log4j ; el parser SAX , introducido en ; el package threading , [ 18 ] cuya clase Thread expone un subconjunto de la interfaz de la clase homónima en Java .
Python 2 , es decir Python , fue oficialmente descontinuado el 1 de enero de 2020 ( primero planeado para 2015 ) después de lo cual no se publicarán parches de seguridad y otras mejoras para él .
[ 19 ] [ 20 ] Con el final del ciclo de vida de Python 2 , solo tienen soporte la rama Python [ 21 ] y posteriores .
En la actualidad , Python se aplica en los campos de inteligencia artificial y machine learning [ 22 ] .
== Características y paradigmas ==
Python es un lenguaje de programación multiparadigma .
Esto significa que más que forzar a los programadores a adoptar un estilo particular de programación , permite varios estilos : programación orientada a objetos , programación imperativa y programación funcional .
Otros paradigmas están soportados mediante el uso de extensiones .
Python usa tipado dinámico y conteo de referencias para la administración de memoria .
Una característica importante de Python es la resolución dinámica de nombres ; es decir , lo que enlaza un método y un nombre de variable durante la ejecución del programa ( también llamado enlace dinámico de métodos ) .
Otro objetivo del diseño del lenguaje es la facilidad de extensión .
Se pueden escribir nuevos módulos fácilmente en C o .
Python puede incluirse en aplicaciones que necesitan una interfaz programable .
Aunque la programación en Python podría considerarse en algunas situaciones hostil a la programación funcional tradicional del Lisp , existen bastantes analogías entre Python y los lenguajes minimalistas de la familia Lisp como puede ser Scheme .
== Filosofía ==
Los usuarios de Python se refieren a menudo a la filosofía de Python que es bastante análoga a la filosofía de Unix .
El código que siga los principios de Python se dice que es pythonico .
Estos principios fueron descritos por el desarrollador de Python Tim Peters en El Zen de Python Desde la versión , Python incluye estos puntos ( en su versión original en inglés ) como un huevo de pascua que se muestra al ejecutar import this .
[ 24 ] == Modo interactivo ==
El intérprete de Python estándar incluye un modo interactivo en el cual se escriben las instrucciones en una especie de intérprete de comandos : las expresiones pueden ser introducidas una a una , pudiendo verse el resultado de su evaluación inmediatamente , lo que da la posibilidad de probar porciones de código en el modo interactivo antes de integrarlo como parte de un programa .
Esto resulta útil tanto para las personas que se están familiarizando con el lenguaje como para los programadores más avanzados .
Existen otros programas , tales como IDLE , bpython o IPython , [ 25 ] que añaden funcionalidades extra al modo interactivo , como la compleción automática de código y el coloreado de la sintaxis del lenguaje .
Ejemplo del modo interactivo : == Elementos del lenguaje ==
Python fue diseñado para ser leído con facilidad .
Una de sus características es el uso de palabras donde otros lenguajes utilizarían símbolos .
Por ejemplo , los operadores lógicos , y en Python se escriben not , or y and , respectivamente .
Curiosamente el lenguaje Pascal es junto con COBOL uno de los lenguajes con muy clara sintaxis y ambos son de la década del 70 .
La idea del código claro y legible no es algo nuevo .
El contenido de los bloques de código ( bucles , funciones , clases , etc . )
es delimitado mediante espacios o tabuladores , conocidos como indentación , antes de cada línea de órdenes pertenecientes al bloque .
[ 26 ] Python se diferencia así de otros lenguajes de programación que mantienen como costumbre declarar los bloques mediante un conjunto de caracteres , normalmente entre llaves .
[ 27 ] [ 28 ] Se pueden utilizar tanto espacios como tabuladores para sangrar el código , pero se recomienda no mezclarlos .
[ 29 ] Debido al significado sintáctico de la sangría , cada instrucción debe estar contenida en una sola línea .
No obstante , si por legibilidad se quiere dividir la instrucción en varias líneas , añadiendo una barra invertida al final de una línea , se indica que la instrucción continúa en la siguiente .
Estas instrucciones son equivalentes : === Comentarios ===
Los comentarios se pueden poner de dos formas .
La primera y más apropiada para comentarios largos es utilizando la notación comentario , tres apóstrofos de apertura y tres de cierre .
La segunda notación utiliza el símbolo , y se extienden hasta el final de la línea .
El intérprete no tiene en cuenta los comentarios , lo cual es útil si deseamos poner información adicional en el código .
Por ejemplo , una explicación sobre el comportamiento de una sección del programa .
=== Variables ===
Las variables se definen de forma dinámica , lo que significa que no se tiene que especificar cuál es su tipo de antemano y puede tomar distintos valores en otro momento , incluso de un tipo diferente al que tenía previamente .
Se usa el símbolo = para asignar valores .
Los nombres de variables pueden contener números y letras pero deben comenzar por una letra , además existen 28 palabras reservadas : [ 30 ] === Tipos de datos ===
Los tipos de datos se pueden resumir en esta tabla : Mutable : si su contenido ( o dicho valor ) puede cambiarse en tiempo de ejecución .
Inmutable : si su contenido ( o dicho valor ) no puede cambiarse en tiempo de ejecución .
=== Condicionales ===
Una sentencia condicional ( if ) ejecuta su bloque de código interno solo si se cumple cierta condición .
Se define usando la palabra clave if seguida de la condición , y el bloque de código .
Condiciones adicionales , si las hay , se introducen usando elif seguida de la condición y su bloque de código .
Todas las condiciones se evalúan secuencialmente hasta encontrar la primera que sea verdadera , y su bloque de código asociado es el único que se ejecuta .
Opcionalmente , puede haber un bloque final ( la palabra clave else seguida de un bloque de código ) que se ejecuta solo cuando todas las condiciones fueron falsas .
=== Bucle for ===
El bucle for es similar a foreach en otros lenguajes .
Recorre un objeto iterable , como una lista , una tupla o un generador , y por cada elemento del iterable ejecuta el bloque de código interno .
Se define con la palabra clave for seguida de un nombre de variable , seguido de in , seguido del iterable , y finalmente el bloque de código interno .
En cada iteración , el elemento siguiente del iterable se asigna al nombre de variable especificado : === Bucle while ===
El bucle while evalúa una condición y , si es verdadera , ejecuta el bloque de código interno .
Continúa evaluando y ejecutando mientras la condición sea verdadera .
Se define con la palabra clave while seguida de la condición , y a continuación el bloque de código interno : === Listas y Tuplas ===
Para declarar una lista se usan los corchetes [ ] , en cambio , para declarar una tupla se usan los paréntesis .
En ambas los elementos se separan por comas , y en el caso de las tuplas es necesario que tengan como mínimo una coma .
Tanto las listas como las tuplas pueden contener elementos de diferentes tipos .
No obstante las listas suelen usarse para elementos del mismo tipo en cantidad variable mientras que las tuplas se reservan para elementos distintos en cantidad fija .
Para acceder a los elementos de una lista o tupla se utiliza un índice entero ( empezando por 0 , no por 1 ) .
Se pueden utilizar índices negativos para acceder elementos a partir del final .
Las listas se caracterizan por ser mutables , es decir , se puede cambiar su contenido en tiempo de ejecución , mientras que las tuplas son inmutables ya que no es posible modificar el contenido una vez Tuplas === Diccionarios ===
Para declarar un diccionario se usan las llaves .
Contienen elementos separados por comas , donde cada elemento está formado por un par clave : valor ( el símbolo : separa la clave de su valor correspondiente ) .
Los diccionarios son mutables , es decir , se puede cambiar el contenido de un valor en tiempo de ejecución .
En cambio , las claves de un diccionario deben ser inmutables .
Esto quiere decir , por ejemplo , que no podremos usar ni listas ni diccionarios como claves .
El valor asociado a una clave puede ser de cualquier tipo de dato , incluso un diccionario .
=== Sentencia Switch Case ===
Si bien Python no tiene la estructura Switch , hay varias formas de realizar la operación típica que realizaríamos con una sentencia switch case .
Usando if , elif , else Podemos usar la estructura de la siguiente manera : En esa estructura se ejecutara controlando la condicion1 , si no se cumple pasara a la siguiente y así sucesivamente hasta entrar en el else .
Un ejemplo práctico seria : Podriamos decir que el lado negativo de la sentencia armada con if , elif y else es que si la lista de posibles operaciones es muy larga , las tiene que recorrer una por una hasta llegar a la correcta .
Usando diccionario Podemos usar un diccionario para el mismo ejemplo : De esta manera , si las opciones fueran muchas , no recorrería todas ; solo iría directamente a la operación buscada en la última línea ( op , lambda : None ) estamos dando la opción por defecto .
=== Conjuntos ===
Los conjuntos se construyen mediante set ( items ) donde items es cualquier objeto iterable , como listas o tuplas .
Los conjuntos no mantienen el orden ni contienen elementos duplicados .
Se suelen utilizar para eliminar duplicados de una secuencia , o para operaciones matemáticas como intersección , unión , diferencia y diferencia simétrica .
=== Listas por comprensión ===
Una lista por comprensión ( en inglés : list comprehension ) es una expresión compacta para definir listas .
Al igual que lambda , aparece en lenguajes funcionales .
Ejemplos : === Funciones ===
Las funciones se definen con la palabra clave def , seguida del nombre de la función y sus parámetros .
Otra forma de escribir funciones , aunque menos utilizada , es con la palabra clave lambda ( que aparece en lenguajes funcionales como Lisp ) .
El valor devuelto en las funciones con def será el dado con la instrucción : lambda : === Clases ===
Las clases se definen con la palabra clave class , seguida del nombre de la clase y , si hereda de otra clase , el nombre de esta .
En Python era recomendable que una clase heredase de Object , en Python ya no hace falta .
En una clase un método equivale a una función , y un atributo equivale a una variable .
[ 31 ] es un método especial que se ejecuta al instanciar la clase , se usa generalmente para inicializar atributos y ejecutar métodos necesarios .
Al igual que todos los métodos en Python , debe tener al menos un parámetro , generalmente se utiliza self .
El resto de parámetros serán los que se indiquen al instanciar la clase .
Los atributos que se desee que sean accesibles desde fuera de la clase se deben declarar usando self .
delante del nombre .
En Python no existe el concepto de encapsulación , [ 32 ] por lo que el programador debe ser responsable de asignar los valores a los atributos === Módulos ===
Existen muchas propiedades que se pueden agregar al lenguaje importando módulos , que son minicódigos ( la mayoría escritos también en Python ) que proveen de ciertas funciones y clases para realizar determinadas tareas .
Un ejemplo es el módulo Tkinter [ 33 ] , que permite crear interfaces gráficas basadas en la biblioteca Tk .
Otro ejemplo es el módulo os , que provee acceso a muchas funciones del sistema operativo .
Los módulos se agregan a los códigos escribiendo import seguida del nombre del módulo que queramos usar .
[ 34 ] Instalación de módulos ( pip ) La instalación de módulos en Python se puede realizar mediante la herramienta de software ( suele venir incluida con las instalaciones de Python ) Pip .
Esta herramienta permite la gestión de los distintos paquetes o módulos instalables para Python , incluyendo así las siguientes características : Instalación de paquetes .
Instalación de versiones concretas de paquetes .
Instalación a partir de un archivo de configuración .
Desinstalación .
Actualización .
Interfaz al sistema operativo El módulo os provee funciones para interactuar con el sistema operativo : Para tareas de administración de archivos , el módulo shutil provee una interfaz de más alto nivel : Comodines de archivos El módulo glob provee una función para crear listas de archivos a partir de búsquedas con comodines en carpetas : Argumentos de línea de órdenes Los argumentos de línea de órdenes se almacenan en el atributo argv del módulo sys como una lista .
Matemática El módulo math permite acceder a las funciones de matemática de punto flotante : El módulo random se utiliza para realizar selecciones al azar : El módulo statistics se utiliza para estadística básica , por ejemplo : media , mediana , varianza , etc .
: Fechas y Tiempos El módulo datetime permite manejar fechas y tiempos : == Sistema de objetos ==
En Python todo es un objeto ( incluso las clases ) .
Las clases , al ser objetos , son instancias de una metaclase .
Python además soporta herencia múltiple y polimorfismo .
== Biblioteca estándar ==
Python tiene una gran biblioteca estándar , usada para una diversidad de tareas .
Esto viene de la filosofía pilas incluidas ( batteries included ) en referencia a los módulos de Python .
Los módulos de la biblioteca estándar pueden mejorarse por módulos personalizados escritos tanto en C como en Python .
Debido a la gran variedad de herramientas incluidas en la biblioteca estándar , combinada con la habilidad de usar lenguajes de bajo nivel como C y , los cuales son capaces de interactuar con otras bibliotecas , Python es un lenguaje que combina su clara sintaxis con el inmenso poder de lenguajes menos elegantes .
== Implementaciones ==
Existen diversas implementaciones del lenguaje : CPython es la implementación original , disponible para varias plataformas en el sitio oficial de Python .
IronPython es la implementación para Stackless Python es la variante de CPython que trata de no usar el stack de C Jython es la implementación hecha en Java Pippy es la implementación realizada para Palm PyPy es una implementación de Python escrita en Python y optimizada mediante JIT ActivePython es una implementación privativa de Python con extensiones , para servidores en producción y aplicaciones de misión crítica desarrollado por ActiveState Software .
== Incidencias ==
A lo largo de su historia , Python ha presentado una serie de incidencias , de las cuales las más importantes han sido las siguientes : El 13 de febrero de 2009 se lanzó una nueva versión de Python bajo el nombre clave Python 3000 o , [ 35 ] abreviado , Py3K .
[ 36 ] Esta nueva versión incluye toda una serie de cambios que requieren reescribir el código de versiones anteriores .
Para facilitar este proceso junto con Python 3 se ha publicado una herramienta automática llamada 2to3 .
[ 37 ] [ 38 ] En el sistema operativo Windows 10 , a partir de su actualización de mayo de 2019 , dispone de la característica de preinstalación asistida del lenguaje Python y varias de sus herramientas adicionales .
[ 39 ] == Véase también ==
PyPI .
Repositorio de paquetes de software de terceros para Python .
Django .
Framework de desarrollo web .
Flask .
Framework de desarrollow web .
CubicWeb .
Framework de desarrollo web en plataforma Semántica .
Pygame .
Conjunto de módulos para la creación de videojuegos en dos dimensiones .
Tkinter .
Binding de la biblioteca gráfica para Python .
PyGTK .
Binding de la biblioteca gráfica GTK para Python .
wxPython .
Binding de la biblioteca gráfica wxWidgets para Python .
PyQt .
Binding de la biblioteca gráfica Qt para Python .
PySide .
Binding de la biblioteca gráfica Qt para Python por Nokia .
Plone .
Sistema de gestión de contenidos .
Biopython , Colección de bibliotecas orientadas a la bioinformática para Python .
NumPy .
Biblioteca que da soporte al cálculo con matrices y vectores .
SciPy .
Biblioteca que permite realizar análisis científico como optimización , álgebra lineal , integración , ecuaciones diferenciales entre otras .
Pandas .
Biblioteca que permite el análisis de datos a través de series y dataframes .
Pyomo .
Colección de paquetes de software de Python para formular modelos de optimización .
Biblioteca que implementa algoritmos de aprendizaje automático .
== Referencias ==
== Bibliografía ==
Knowlton , Jim ( 2009 ) .
Python .
tr : Fernández Vélez , María Jesús ( 1 edición ) .
Anaya Interactiva .
ISBN .
Martelli , Alex ( 2007 ) .
Python .
Guía de referencia .
tr : Gorjón Salvador , Bruno ( 1 edición ) .
Anaya Interactiva .
ISBN .
== Enlaces externos ==
( en inglés ) Dive into Python , ejemplos de las principales características de este lenguaje .
( en inglés ) Guía del principiante
